<?php

  /**
   * @file
   * The Islandora DSS Module for Lafayette College Libraries
   * @author griffinj
   *
   */

module_load_include('inc', 'islandora_dss', 'includes/islandora_basic_collection');
module_load_include('inc', 'islandora_dss', 'includes/dss_yohe');

function _islandora_dss_set_alias(array $path, $existing_alias = NULL, $op = NULL) {
  $verbose = _pathauto_verbose(NULL, $op);

  // Alert users that an existing callback cannot be overridden automatically
  if (_pathauto_path_is_callback($path['alias'])) {
    if ($verbose) {
      _pathauto_verbose(t('Ignoring alias %alias due to existing path conflict.', array('%alias' => $path['alias'])));
    }
    return;
  }
  // Alert users if they are trying to create an alias that is the same as the internal path
  if ($path['source'] == $path['alias']) {
    if ($verbose) {
      _pathauto_verbose(t('Ignoring alias %alias because it is the same as the internal path.', array('%alias' => $path['alias'])));
    }
    return;
  }

  // Skip replacing the current alias with an identical alias
  if (empty($existing_alias) || $existing_alias['alias'] != $path['alias']) {
    $path += array('pathauto' => TRUE, 'original' => $existing_alias);

    // If there is already an alias, respect some update actions.
    if (!empty($existing_alias)) {
      switch (variable_get('pathauto_update_action', PATHAUTO_UPDATE_ACTION_DELETE)) {
        case PATHAUTO_UPDATE_ACTION_NO_NEW:
          // Do not create the alias.
          return;
        case PATHAUTO_UPDATE_ACTION_LEAVE:
          // Create a new alias instead of overwriting the existing by leaving
          // $path['pid'] empty.
          break;
        case PATHAUTO_UPDATE_ACTION_DELETE:
          // The delete actions should overwrite the existing alias.
          $path['pid'] = $existing_alias['pid'];
          break;
      }
    }

    // Save the path array.
    path_save($path);

    if ($verbose) {
      if (!empty($existing_alias['pid'])) {
        _pathauto_verbose(t('Created new alias %alias for %source, replacing %old_alias.', array('%alias' => $path['alias'], '%source' => $path['source'], '%old_alias' => $existing_alias['alias'])));
      }
      else {
        _pathauto_verbose(t('Created new alias %alias for %source.', array('%alias' => $path['alias'], '%source' => $path['source'])));
      }
    }

    return $path;
  }
}

/**
 * Create the Object Alias
 *
 */
function islandora_dss_create_alias($module, $op, $source, $object, $type = NULL, $language = LANGUAGE_NONE) {

  // Retrieve and apply the pattern for this content type.
  $pattern = pathauto_pattern_load_by_entity($module, $type, $language);

  if (empty($pattern)) {
    // No pattern? Do nothing (otherwise we may blow away existing aliases...)
    return '';
  }

  // Special handling when updating an item which is already aliased.
  $existing_alias = NULL;
  if ($op == 'update' || $op == 'bulkupdate') {
    if ($existing_alias = _pathauto_existing_alias_data($source, $language)) {
      switch (variable_get('pathauto_update_action', PATHAUTO_UPDATE_ACTION_DELETE)) {
        case PATHAUTO_UPDATE_ACTION_NO_NEW:
          // If an alias already exists, and the update action is set to do nothing,
          // then gosh-darn it, do nothing.
          return '';
      }
    }
  }

  // Replace any tokens in the pattern. Uses callback option to clean replacements. No sanitization.
  /*
  $alias = token_replace($pattern, array('islandora_object' => $object), array(
									       'sanitize' => FALSE,
									       'clear' => TRUE,
									       'callback' => 'pathauto_clean_token_values',
									       'language' => (object) array('language' => $language),
									       'pathauto' => TRUE,
									       ));
  */
  $alias = token_replace($pattern, $object, array());

  // Check if the token replacement has not actually replaced any values. If
  // that is the case, then stop because we should not generate an alias.
  // @see token_scan()
  $pattern_tokens_removed = preg_replace('/\[[^\s\]:]*:[^\s\]]*\]/', '', $pattern);
  if ($alias === $pattern_tokens_removed) {
    return '';
  }

  $alias = pathauto_clean_alias($alias);

  // Allow other modules to alter the alias.
  // Temporary
  /*
  $context = array(
    'module' => $module,
    'op' => $op,
    'source' => &$source,
    'data' => $data,
    'type' => $type,
    'language' => &$language,
    'pattern' => $pattern,
  );
  drupal_alter('pathauto_alias', $alias, $context);
  */

  // If we have arrived at an empty string, discontinue.
  if (!drupal_strlen($alias)) {
    return '';
  }

  // If the alias already exists, generate a new, hopefully unique, variant.
  $original_alias = $alias;
  pathauto_alias_uniquify($alias, $source, $language);
  if ($original_alias != $alias) {
    // Alert the user why this happened.
    _pathauto_verbose(t('The automatically generated alias %original_alias conflicted with an existing alias. Alias changed to %alias.', array(
      '%original_alias' => $original_alias,
      '%alias' => $alias,
    )), $op);
  }

  // Return the generated alias if requested.
  if ($op == 'return') {
    return $alias;
  }

  // Build the new path alias array and send it off to be created.
  $path = array(
    'source' => $source,
    'alias' => $alias,
    'language' => $language,
  );

  //dpm('setting alias');
  $path = _pathauto_set_alias($path, $existing_alias, $op);
  //dpm('set the alias');
  return $path;
}

/**
 * Update Object Alias.
 */
function islandora_dss_update_alias($entity_type, $entity, $op) {

  if($entity_type == 'islandora_object') {

    // Skip processing if we are not managing this entity type.
    $types = pathauto_entity_supported_entity_types();
    if (!isset($types[$entity_type])) {

      return;
    }
  
    $entity_info = entity_get_info($entity_type);
  /*
  $entity_info = entity_get_info($entity_type);
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  if (!pathauto_pattern_load_by_entity($entity_type, $bundle)) {
    return;
  }

  if ($op === 'insert') {
    // @todo Remove the next line when http://drupal.org/node/1025870 is fixed.
    unset($entity->uri);
  }
  */

    module_load_include('inc', 'pathauto');
    //$uri = entity_uri($entity_type, $entity);

    islandora_dss_create_alias('islandora', $op, "islandora/object/$entity->id", array($entity_info['token type'] => $entity));
  } else {
    
    // Update the alias using pathauto_entity if this is not an Islandora Object
    return pathauto_entity_update_alias($entity_type, $entity, 'bulkupdate');
  }
}

/**
 * Retrieve a URL for an Islandora Object from a MetaDB metadata field value
 *
 * Used for templates
 * @code
 * print islandora_dss_get_islandora_url($value['value']);
 * @endcode
 */
function islandora_dss_get_islandora_url($pattern) {

  $object = array_shift(islandora_dss_fuzzy_search($pattern));
  $source = "islandora/object/{$object->id}";

  //$path = path_load(array('source' => $source));
  //return is_array($path) ? $path['alias'] : $source;
  return $source;
}

/**
 * Retrieve the members of a collection
 *
 * @todo Refactor this into an IslandoraCollection class
 *
 */
function islandora_dss_get_members($obj_pid) {

  // Get the connection
  $connection = islandora_get_tuque_connection(user_load(1), $url);
  
  $object = islandora_object_load($obj_pid);

  module_load_include('inc', 'islandora', 'includes/utilities');
  $query = 'SELECT $object $title $content
     FROM <#ri>
     WHERE {
            $object $collection_predicate <info:fedora/' . $obj_pid . '>;
                   <fedora-model:label> $title ;
                   <fedora-model:hasModel> $content ;
                   <fedora-model:state> <fedora-model:Active> .
            FILTER(sameTerm($collection_predicate, <fedora-rels-ext:isMemberOfCollection>) || sameTerm($collection_predicate, <fedora-rels-ext:isMemberOf>))
            FILTER (!sameTerm($content, <info:fedora/fedora-system:FedoraObject-3.0>))';
  $enforced = variable_get('islandora_namespace_restriction_enforced', FALSE);
  if ($enforced) {
    $namespace_array = explode(' ', variable_get('islandora_pids_allowed', 'default: demo: changeme: ilives: islandora-book: books: newspapers: '));
    $namespace_array = array_map('islandora_get_namespace', $namespace_array);
    $namespace_array = array_filter($namespace_array, 'trim');
    $namespace_sparql = implode('|', $namespace_array);
    $query .= 'FILTER(regex(str(?object), "info:fedora/(' . $namespace_sparql . '):"))';
  }
  $query .= '} ORDER BY $title';
  $query_array = array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $obj_pid,
    // Seems as though this is ignored completely.
    'page_size' => $page_size,
    'page_number' => $page_number,
  );
  drupal_alter('islandora_basic_collection_query', $query_array);

  try {

    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);

    $map = function($result) {

      return islandora_object_load($result['object']['value']);
    };

    $members = array_map($map, $results);
  } catch(Exception $e) {

    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $obj_pid)), 'error');
  }

  return $members;
}

/**
 * Retrieve the ID for the Object
 *
 * @todo Refactor into a ContentDmObject Class
 */
function _islandora_dss_get_cdm_id($object) {

  //preg_match('/item\=.+?\-(\d+)</', $object['MODS']->content, $m);
  preg_match('/item\=(.+?)</', $object['MODS']->content, $m);
  $metadb_id = $m[1];

  /**
   * Remove the initial 0 for 5 digit identifiers
   * Resolves DSS-196
   */

  if(strlen($metadb_id) > 4) {

    $metadb_id = preg_replace('/\-\d(\d{4})/', '-\1', $metadb_id);
  }

  /**
   * Restructure the identifiers for the Historical Photograph Collection
   * Resolves DSS-285
   *
   */
  $metadb_id = str_replace('cap', 'hpc', $metadb_id);
  
  return $metadb_id;
}

/**
 * Retrieve the MetaDB ID for the Object
 *
 * @todo Refactor into a MetaDbObject Class
 */
function _islandora_dss_get_metadb_id($object) {

  if(preg_match('/^\[([a-zA-Z]+\d+)\]/', $object->label, $m)) {

    return $m[1];
  }
}

function islandora_dss_get_citation_alias($object, $coll_pid=NULL, $path_base='citation/') {

  $path_segment = _islandora_dss_get_metadb_id($object);

  return $path_base . $path_segment;
}

/**
 * Generate the alias for an Islandora Object
 *
 * @todo Refactor into both IslandoraObject and IslandoraCollection classes
 *
 */
function islandora_dss_get_alias_metadb($object, $coll_pid=NULL, $path_base='collections/') {

  /**
   * This assumes that all collection objects have the appropriate parent Object
   *
   */

  if(!isset($coll_pid)) {

    $coll_pid = array_shift($object->getParents());

  $EASTASIA_PID_MAP = array('islandora:eastAsia' => 'eastasia',
			    'eastAsia:rjwStereo' => 'eastasia/rjw-stereo',
			    'eastAsia:imperialPostcards' => 'eastasia/imperial-postcards',
			    
			    //'eastAsia:postcardAlbums' => 'postcard-albums',
				
			    'eastAsia:paTsubokura' => 'eastasia/pa-tsubokura',
			    'eastAsia:paOmitsu01' => 'eastasia/pa-omitsu01',
			    'eastAsia:paOmitsu02' => 'eastasia/pa-omitsu02',
				
			    'eastAsia:linPostcards' => 'eastasia/lin-postcards',
				  
			    //'eastAsia:gameCards' => 'game-cards',
			    'eastAsia:japanStudyCards' => 'eastasia/japan-study-cards',
				  
			    'eastAsia:pacwarPostcards' => 'eastasia/pacwar-postcards',
				  
			    'eastAsia:lewis' => 'eastasia/lewis-postcards',
				  
			    'eastAsia:warnerPostcards' => 'eastasia/warner-postcards',
			    'eastAsia:warnerNegsIndonesia' => 'eastasia/warner-negs-indonesia',
			    'eastAsia:warnerNegsManchuria' => 'eastasia/warner-negs-manchuria',
			    'eastAsia:warnerNegsTaiwan' => 'eastasia/warner-negs-taiwan',
			    'eastAsia:warnerSlidesJapan' => 'eastasia/warner-slides-japan',
			    'eastAsia:warnerSouvenirs' => 'eastasia/warner-souvenirs',
				
			    'eastAsia:woodsworthImages' => 'eastasia/woodsworth-images',
				  
			    //'eastAsia:cpw' => 'cpw',
				  
			    'eastAsia:cpwNofuko' => 'eastasia/cpw-nofuko',
			    'eastAsia:cpwShashinkai' => 'eastasia/cpw-shashinkai');

  $METADB_PROJECT_PID_MAP = array(
				  'islandora:mdlPrints' => 'mdl-prints',
				  'islandora:cap' => 'cap',
				  'islandora:geologySlidesEsi' => 'geology-slides-esi',
				  'islandora:warCasualties' => 'war-casualties',
				  'islandora:mckelvyHouse' => 'mckelvy',
				  );
  } else {

    $EASTASIA_PID_MAP = array('East Asia Image Collection' => 'eastasia',
			      'Japanese Imperial House Postcard Album' => 'eastasia/pa-koshitsu',
			      'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => 'eastasia/rjw-stereo',
			      'Imperial Postcard Collection' => 'eastasia/imperial-postcards',
			      'Tsubokura Russo-Japanese War Postcard Album' => 'eastasia/pa-tsubokura',
			      'Sino-Japanese War Postcard Album 01' => 'eastasia/pa-omitsu01',
			      'Sino-Japanese War Postcard Album 02' => 'eastasia/pa-omitsu02',
			      'Lin Chia-Feng Family Postcard Collection' => 'eastasia/lin-postcards',
			      'Japanese History Study Cards' => 'eastasia/japan-study-cards',
			      'Pacific War Postcard Collection' => 'eastasia/pacwar-postcards',
			      'Michael Lewis Taiwan Postcard Collection' => 'eastasia/lewis-postcards',
			      'Gerald & Rella Warner Taiwan Postcard Collection' => 'eastasia/warner-postcards',
			      'Gerald & Rella Warner Dutch East Indies Negative Collection' => 'eastasia/warner-negs-indonesia',
			      'Gerald & Rella Warner Manchuria Negative Collection' => 'eastasia/warner-negs-manchuria',
			      'Gerald & Rella Warner Taiwan Negative Collection' => 'eastasia/warner-negs-taiwan',
			      'Gerald & Rella Warner Japan Slide Collection' => 'eastasia/warner-slides-japan',
			      'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => 'eastasia/warner-souvenirs',
			      'Woodsworth Taiwan Image Collection' => 'eastasia/woodsworth-images',
			      'Scenic Taiwan' => 'eastasia/cpw-nofuko',
			      'Taiwan Photographic Monthly' => 'eastasia/cpw-shashinkai');

    $METADB_PROJECT_PID_MAP = array(
				    'Lafayette Newspaper Collection' => 'newspaper',
				    'Marquis de Lafayette Prints Collection' => 'lafayetteprints',
				    'Historical Photograph Collection' => 'historicalphotos',
				    'John S. Shelton Earth Science Image Collection' => 'geology',
				    'Lafayette World War II Casualties' => 'war',
				    'McKelvy House Photograph Collection' => 'mckelvy',
				    );
  }

  // If this is a member of the East Asia Image Collections...
  if(array_key_exists($coll_pid, $EASTASIA_PID_MAP)) {

    $path_segment = $EASTASIA_PID_MAP[$coll_pid] . '/' . _islandora_dss_get_metadb_id($object);
  } elseif(array_key_exists($coll_pid, $METADB_PROJECT_PID_MAP)) {

    $path_segment = $METADB_PROJECT_PID_MAP[$coll_pid] . '/' . _islandora_dss_get_cdm_id($object);
  }

  /*
  if(array_key_exists($object->id, $EASTASIA_PID_MAP)) {

    $path_segment = $EASTASIA_PID_MAP[$object->id];
  } elseif(array_key_exists($object->id, $METADB_PROJECT_PID_MAP)) {

    $path_segment = $METADB_PROJECT_PID_MAP[$object->id];
  } elseif(isset($coll_pid)) {

    throw new Exception('Not implemented');
  }
  */

  return $path_base . $path_segment;
}

function islandora_dss_generate_citation_aliases($collection='East Asia Image Collection') {

  $solr = new Apache_Solr_Service('localhost', 8080, 'solr/fedora_5' . '/');

  $EASTASIA_RELATION_MAP = array('East Asia Image Collection' => 'eastasia',
				 'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => 'eastasia/rjw-stereo',
				 'Imperial Postcard Collection' => 'eastasia/imperial-postcards',
				 'Tsubokura Russo-Japanese War Postcard Album' => 'eastasia/pa-tsubokura',
				 'Sino-Japanese War Postcard Album 01' => 'eastasia/pa-omitsu01',
				 'Sino-Japanese War Postcard Album 02' => 'eastasia/pa-omitsu02',
				 'Lin Chia-Feng Family Postcard Collection' => 'eastasia/lin-postcards',
				 'Japanese History Study Cards' => 'eastasia/japan-study-cards',
				 'Pacific War Postcard Collection' => 'eastasia/pacwar-postcards',
				 'Michael Lewis Taiwan Postcard Collection' => 'eastasia/lewis-postcards',
				 'Gerald & Rella Warner Taiwan Postcard Collection' => 'eastasia/warner-postcards',
				 'Gerald & Rella Warner Dutch East Indies Negative Collection' => 'eastasia/warner-negs-indonesia',
				 'Gerald & Rella Warner Manchuria Negative Collection' => 'eastasia/warner-negs-manchuria',
				 'Gerald & Rella Warner Taiwan Negative Collection' => 'eastasia/warner-negs-taiwan',
				 'Gerald & Rella Warner Japan Slide Collection' => 'eastasia/warner-slides-japan',
				 'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => 'eastasia/warner-souvenirs',
				 'Woodsworth Taiwan Image Collection' => 'eastasia/woodsworth-images',
				 'Scenic Taiwan' => 'eastasia/cpw-nofuko',
				 'Taiwan Photographic Monthly' => 'eastasia/cpw-shashinkai');

  try {

    $solr_query = "cdm.Relation.IsPartOf:\"$collection\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

    try {

      // Additionally generate the /citation paths for EAIC Objects
      $subcollection = array_pop($solr_doc['cdm.Relation.IsPartOf']);

      drush_log("Generating the alias $alias for {$solr_doc['PID']} in $subcollection", 'okay');
      exit(1);

      if(array_key_exists($subcollection, $EASTASIA_RELATION_MAP)) {

	$member = islandora_object_load($solr_doc['PID']);
	$path = array('source' => "islandora/object/{$solr_doc['PID']}",
		      'alias' => islandora_dss_get_citation_alias($member, $subcollection));
      }

      path_delete(array('source' => $path['source']));
      path_save($path);

      // Is there a back for these images?
      drush_log("Successfully generated the path {$path['alias']} for {$solr_doc['PID']}", 'success');
    } catch(Exception $e) {

      drush_log("Failure: {$e->getMessage()}", 'error');
    }
  }
}

/**
 * Generate paths for Islandora Collection Objects
 *
 * @todo Refactor into a class for Islandora Collection Objects
 *
 */
function islandora_dss_purge_islandora_paths($coll_pid, $solr_host = 'localhost') {

  $solr = new Apache_Solr_Service($solr_host, 8080, 'solr/fedora_5' . '/');

  $EASTASIA_RELATION_MAP = array('East Asia Image Collection' => 'eastasia',
				 'Japanese Imperial House Postcard Album' => 'eastasia/pa-koshitsu',
				 'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => 'eastasia/rjw-stereo',
				 'Imperial Postcard Collection' => 'eastasia/imperial-postcards',
				 'Tsubokura Russo-Japanese War Postcard Album' => 'eastasia/pa-tsubokura',
				 'Sino-Japanese War Postcard Album 01' => 'eastasia/pa-omitsu01',
				 'Sino-Japanese War Postcard Album 02' => 'eastasia/pa-omitsu02',
				 'Lin Chia-Feng Family Postcard Collection' => 'eastasia/lin-postcards',
				 'Japanese History Study Cards' => 'eastasia/japan-study-cards',
				 'Pacific War Postcard Collection' => 'eastasia/pacwar-postcards',
				 'Michael Lewis Taiwan Postcard Collection' => 'eastasia/lewis-postcards',
				 'Gerald & Rella Warner Taiwan Postcard Collection' => 'eastasia/warner-postcards',
				 'Gerald & Rella Warner Dutch East Indies Negative Collection' => 'eastasia/warner-negs-indonesia',
				 'Gerald & Rella Warner Manchuria Negative Collection' => 'eastasia/warner-negs-manchuria',
				 'Gerald & Rella Warner Taiwan Negative Collection' => 'eastasia/warner-negs-taiwan',
				 'Gerald & Rella Warner Japan Slide Collection' => 'eastasia/warner-slides-japan',
				 'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => 'eastasia/warner-souvenirs',
				 'Woodsworth Taiwan Image Collection' => 'eastasia/woodsworth-images',
				 'Scenic Taiwan' => 'eastasia/cpw-nofuko',
				 'Taiwan Photographic Monthly' => 'eastasia/cpw-shashinkai');

  try {

    $solr_query = "cdm.Relation.IsPartOf:\"$coll_pid\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf dc.date.sort', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

    try {

      $subcollection = array_pop($solr_doc['cdm.Relation.IsPartOf']);

      $member = islandora_object_load($solr_doc['PID']);

      /**
       * Specialized handling for the newspaper aliases
       *
       */
      if($subcollection == 'Lafayette Newspaper Collection') {

	$alias = $solr_doc['dc.date.sort'];
	preg_match('/(\d{4}-\d{2}-\d{2})/', $alias, $m);
	$alias = 'collections/newspaper/' . implode(explode('-', $m[1]));
      } else {

	$alias = islandora_dss_get_alias_metadb($member, $subcollection);
      }

      $path = array('source' => "islandora/object/{$solr_doc['PID']}",
		    'alias' => $alias);

      drush_log("Purging $alias for {$solr_doc['PID']} within $subcollection", 'ok');
      path_delete(array('source' => $path['source']));

      drush_log("Successfully purged the path {$path['alias']} for {$solr_doc['PID']}", 'success');
    } catch(Exception $e) {

      drush_log("Failure: {$e->getMessage()}", 'error');
    }
  }

}

/**
 * Generate paths for Islandora Collection Objects
 *
 * @todo Refactor into a class for Islandora Collection Objects
 *
 */
function islandora_dss_generate_islandora_paths($coll_pid, $solr_host = 'localhost') {

  $solr = new Apache_Solr_Service($solr_host, 8080, 'solr/fedora_5' . '/');

  $EASTASIA_RELATION_MAP = array('East Asia Image Collection' => 'eastasia',
				 'Japanese Imperial House Postcard Album' => 'eastasia/pa-koshitsu',
				 'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => 'eastasia/rjw-stereo',
				 'Imperial Postcard Collection' => 'eastasia/imperial-postcards',
				 'Tsubokura Russo-Japanese War Postcard Album' => 'eastasia/pa-tsubokura',
				 'Sino-Japanese War Postcard Album 01' => 'eastasia/pa-omitsu01',
				 'Sino-Japanese War Postcard Album 02' => 'eastasia/pa-omitsu02',
				 'Lin Chia-Feng Family Postcard Collection' => 'eastasia/lin-postcards',
				 'Japanese History Study Cards' => 'eastasia/japan-study-cards',
				 'Pacific War Postcard Collection' => 'eastasia/pacwar-postcards',
				 'Michael Lewis Taiwan Postcard Collection' => 'eastasia/lewis-postcards',
				 'Gerald & Rella Warner Taiwan Postcard Collection' => 'eastasia/warner-postcards',
				 'Gerald & Rella Warner Dutch East Indies Negative Collection' => 'eastasia/warner-negs-indonesia',
				 'Gerald & Rella Warner Manchuria Negative Collection' => 'eastasia/warner-negs-manchuria',
				 'Gerald & Rella Warner Taiwan Negative Collection' => 'eastasia/warner-negs-taiwan',
				 'Gerald & Rella Warner Japan Slide Collection' => 'eastasia/warner-slides-japan',
				 'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => 'eastasia/warner-souvenirs',
				 'Woodsworth Taiwan Image Collection' => 'eastasia/woodsworth-images',
				 'Scenic Taiwan' => 'eastasia/cpw-nofuko',
				 'Taiwan Photographic Monthly' => 'eastasia/cpw-shashinkai');

  try {

    $solr_query = "cdm.Relation.IsPartOf:\"$coll_pid\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf dc.date.sort', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

    try {

      $subcollection = array_pop($solr_doc['cdm.Relation.IsPartOf']);

      $member = islandora_object_load($solr_doc['PID']);

      /**
       * Specialized handling for the newspaper aliases
       *
       */
      if($subcollection == 'Lafayette Newspaper Collection') {

	$alias = $solr_doc['dc.date.sort'];
	preg_match('/(\d{4}-\d{2}-\d{2})/', $alias, $m);
	$alias = 'collections/newspaper/' . implode(explode('-', $m[1]));
      } else {

	$alias = islandora_dss_get_alias_metadb($member, $subcollection);
      }

      $path = array('source' => "islandora/object/{$solr_doc['PID']}",
		    'alias' => $alias);

      drush_log("Generating $alias for {$solr_doc['PID']} within $subcollection", 'ok');
      path_delete(array('source' => $path['source']));

      if($alias == 'collections/') {

	drush_log("Cannot generate the path for {$solr_doc['PID']}", 'warn');
	exit(1);
      }

      path_save($path);

      // Is there a back for these images?
      drush_log("Successfully generated the path {$path['alias']} for {$solr_doc['PID']}", 'success');
    } catch(Exception $e) {

      drush_log("Failure: {$e->getMessage()}", 'error');
    }
  }

}

/**
 * Generate paths for Islandora Collection Objects
 *
 * @todo Refactor into a class for Islandora Collection Objects
 *
 */
function islandora_dss_update_islandora_paths($coll_pid, $solr_host = 'localhost') {

  $solr = new Apache_Solr_Service($solr_host, 8080, 'solr/fedora_5' . '/');

  $EASTASIA_RELATION_MAP = array('East Asia Image Collection' => 'eastasia',
				 'Japanese Imperial House Postcard Album' => 'eastasia/pa-koshitsu',
				 'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => 'eastasia/rjw-stereo',
				 'Imperial Postcard Collection' => 'eastasia/imperial-postcards',
				 'Tsubokura Russo-Japanese War Postcard Album' => 'eastasia/pa-tsubokura',
				 'Sino-Japanese War Postcard Album 01' => 'eastasia/pa-omitsu01',
				 'Sino-Japanese War Postcard Album 02' => 'eastasia/pa-omitsu02',
				 'Lin Chia-Feng Family Postcard Collection' => 'eastasia/lin-postcards',
				 'Japanese History Study Cards' => 'eastasia/japan-study-cards',
				 'Pacific War Postcard Collection' => 'eastasia/pacwar-postcards',
				 'Michael Lewis Taiwan Postcard Collection' => 'eastasia/lewis-postcards',
				 'Gerald & Rella Warner Taiwan Postcard Collection' => 'eastasia/warner-postcards',
				 'Gerald & Rella Warner Dutch East Indies Negative Collection' => 'eastasia/warner-negs-indonesia',
				 'Gerald & Rella Warner Manchuria Negative Collection' => 'eastasia/warner-negs-manchuria',
				 'Gerald & Rella Warner Taiwan Negative Collection' => 'eastasia/warner-negs-taiwan',
				 'Gerald & Rella Warner Japan Slide Collection' => 'eastasia/warner-slides-japan',
				 'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => 'eastasia/warner-souvenirs',
				 'Woodsworth Taiwan Image Collection' => 'eastasia/woodsworth-images',
				 'Scenic Taiwan' => 'eastasia/cpw-nofuko',
				 'Taiwan Photographic Monthly' => 'eastasia/cpw-shashinkai');

  try {

    $solr_query = "cdm.Relation.IsPartOf:\"$coll_pid\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf dc.date.sort', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

    try {

      $subcollection = array_pop($solr_doc['cdm.Relation.IsPartOf']);

      $member = islandora_object_load($solr_doc['PID']);

      // Determine whether or not the path alias exists
      if(!drupal_lookup_path('alias', "islandora/object/{$solr_doc['PID']}")) {

	 /**
	  * Specialized handling for the newspaper aliases
	  *
	  */
	 if($subcollection == 'Lafayette Newspaper Collection') {

	   $alias = $solr_doc['dc.date.sort'];
	   preg_match('/(\d{4}-\d{2}-\d{2})/', $alias, $m);
	   $alias = 'collections/newspaper/' . implode(explode('-', $m[1]));
	 } else {

	   $alias = islandora_dss_get_alias_metadb($member, $subcollection);
	 }

	 $path = array('source' => "islandora/object/{$solr_doc['PID']}",
		       'alias' => $alias);

	 drush_log("Generating $alias for {$solr_doc['PID']} within $subcollection", 'ok');
	 path_delete(array('source' => $path['source']));

	 if($alias == 'collections/') {

	   drush_log("Cannot generate the path for {$solr_doc['PID']}", 'warn');
	   exit(1);
	 }

	 path_save($path);

	 // Is there a back for these images?
	 drush_log("Successfully generated the path {$path['alias']} for {$solr_doc['PID']}", 'success');
      } else {

	drush_log("Path for {$solr_doc['PID']} within $subcollection already exists", 'ok');
      }
    } catch(Exception $e) {

      drush_log("Failure: {$e->getMessage()}", 'error');
    }
  }
}

function islandora_dss_get_metadb_id($object) {

  $mods_doc = new SimpleXMLElement($object['MODS']->content);

  $mods_doc->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
  $result = $mods_doc->xpath('//mods:title');

  $map = function($relation_is_part_of_elem) {

    return (string) $relation_is_part_of_elem;
  };
  $metadb_download_url = array_pop(array_map($map, $mods_doc->xpath('//mods:location/mods:url[@displayLabel="Download"]')));

  preg_match('/\=(.+)$/', $metadb_download_url, $m);
  return $m[1];
}

function islandora_dss_get_metadb_file_path($object, $is_back = FALSE) {

  $EAIC_SECONDARY_DIR_MAP = array(
				  'imperial-postcards' => 'imperial-postcards/backs', //b jpg or tiff
				  'pa-koshitsu' => 'pa-koshitsu', //b jpg
				  'pa-tsubokura' => 'pa-tsubokura', //b jpg
				  'pa-omitsu01' => 'pa-omitsu01', //b jpg
				  'pa-omitsu02' => 'pa-omitsu02', //b jpg

				  'lin-postcards' => 'lin-postcards/back.orig', //b jpg
				  'pacwar-postcards' => 'pacwar-postcards/backs-300dpi', //b jpg
				  'lewis-postcards' => 'lewis/fixed-lewis-postcard-backs', //b jpg
				  'warner-postcards' => 'warner/warner-postcards-captioned/jpg', //5 digits //jpg
				  'warner-negs-manchuria' => 'warner-negs-manchuria', //tif //lc-spcol-warner-negs-manchuria-submerged
				  'warner-negs-taiwan' => 'warner-negs-taiwan/warner-negs-taiwan-submerged-images', //5 digits tiff
				  'woodsworth-images' => 'woodsworth-images/image-backs', // -back //jpg

				  'cpw-nofuko' => 'nofuko/nofuko-missing-pages-hoover-originals' // 5 digit //jpg
				  );

  $metadb_id = islandora_dss_get_metadb_id($object);

  $metadb_id = preg_replace('/0(\d{4})$/', '\1', $metadb_id);

  // /mnt/imago1/master/MetaDB/imperial-postcards/lc-spcol-imperial-postcards-0001.tif
  preg_match('/(.+?)\-\d{4}/', $metadb_id, $m);
  $subdir = $m[1];

  if($is_back and array_key_exists($subdir, $EAIC_SECONDARY_DIR_MAP)) {

    //return '/mnt/imago1/master/other/' . $EAIC_SECONDARY_DIR_MAP[$subdir] . '/lc-spcol-' . $metadb_id . '.tif';
    //return '/mnt/imago1/master/other/' . $EAIC_SECONDARY_DIR_MAP[$subdir] . '/lc-spcol-' . $metadb_id . 'b.tif';

    ///mnt/imago1/master/other/warner-negs-taiwan/warner-negs-taiwan-submerged-images/*0083*

    return array_shift(glob('/mnt/imago1/master/other/' . $EAIC_SECONDARY_DIR_MAP[$subdir] . '/*' . $metadb_id . '*'));
  }

  return '/mnt/imago1/master/MetaDB/' . "$subdir/" . 'lc-spcol-' . $metadb_id . '.tif';
}

function islandora_dss_get_cdm_collections($object) {

  $mods_doc = new SimpleXMLElement($object['MODS']->content);

  $mods_doc->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');
  $result = $mods_doc->xpath('//mods:title');

  $map = function($relation_is_part_of_elem) {

    return (string) $relation_is_part_of_elem;
  };
  return array_map($map, $mods_doc->xpath('//mods:note[@type="admin"]'));
}

/**
 * Calls imagemagick's convert command with the given arguments.
 *
 * @param string $src
 *   The source file uri to convert from.
 * @param string $dest
 *   The destination file uri to convert into.
 * @param int $width
 *   The source file to convert from.
 * @param int $height
 *   The destination file to convert into.
 *
 * @return string
 *   The destination file path if successful otherwise FALSE.
 */
function islandora_dss_large_image_imagemagick_convert($src, $dest, $args) {

  $src = drupal_realpath($src);
  $dest = drupal_realpath($dest);
  $context = array(
    'source' => $src,
    'destination' => $dest,
  );
  drupal_alter('imagemagick_arguments', $args, $context);
  /**
   * To make use of ImageMagick 6's parenthetical command grouping we need to make the $source image the first parameter and $dest the last.
   * See http://www.imagemagick.org/Usage/basics/#cmdline
   */
  $command = escapeshellarg($src) . ' ' . implode(' ', $args) . ' ' . escapeshellarg($dest);
  $output = '';
  $ret = -1;

  if (_imagemagick_convert_exec($command, $output, $ret) !== TRUE) {
    $message = 'imagemagick convert failed to create derivative<br/>Error: @ret<br/>Command: @command<br/>Output: @output';
    $variables = array('@ret' => $ret, '@command' => $command, '@output' => $output);
    watchdog('islandora_large_image', $message, $variables, WATCHDOG_ERROR);
    return FALSE;
  }
  return $dest;
}

function islandora_dss_generate_derivative_jpg_book($pid) {

  $url = 'http://localhost:8080/fedora';
  $connection = islandora_get_tuque_connection(user_load(1), $url);
  $object = $connection->repository->getObject(urldecode($pid));

  $collection_name = array_shift(islandora_dss_get_cdm_collections($object));
  $path_alias = drupal_get_path_alias("islandora/object/{$object->id}");

  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  // @see islandora_book_islandora_delete_object_form_delete_pages_submit()
  $get_pid = function($o) {
    return $o['pid'];
  };

  $is_back = FALSE;
  foreach(array_values(array_map($get_pid, islandora_paged_content_get_pages($object))) as $page_pid) {

    islandora_dss_generate_derivative_jpg_large_image($page_pid, $connection, $collection_name, $path_alias, $is_back);
    $is_back = TRUE;
  }
}

/**
 * Generate paths for Islandora Collection Objects
 *
 * @todo Refactor into a class for Islandora Collection Objects
 *
 */
function islandora_dss_generate_derivative_jpg_large_image($pid, $connection = NULL, $collection_name = NULL, $path_alias = NULL, $is_back = FALSE) {

  /*
  if (!isset($object['OBJ'])) {
    drupal_set_message(t('Could not create image derivatives for %s.  No image file was uploaded.', array('%s' => $object->id)), 'error');
    return FALSE;
  }
  $base_name = str_replace(':', '-', $object->id);
  $uploaded_file = islandora_large_image_get_uploaded_file($object, $base_name);
  if ($uploaded_file) {
    $jp2 = islandora_large_image_create_JP2_derivative($object, $uploaded_file, $base_name);
    $jpg = islandora_large_image_create_JPG_derivative($object, $uploaded_file, $base_name);
    $tn = islandora_large_image_create_TN_derivative($object, $uploaded_file, $base_name);
    return $jp2 && $jpg && $tn && file_unmanaged_delete($uploaded_file);
  }
  return FALSE;
   */

  /*

function islandora_large_image_create_JPG_derivative(AbstractFedoraObject $object, $uploaded_file, $base_name) {
  $args = array();
  $args[] = '-resize ' . escapeshellarg("600 x 800");
  $args[] = '-quality ' . escapeshellarg(variable_get('imagemagick_quality', 75));
  $derivative_file = islandora_large_image_imagemagick_convert($uploaded_file, "temporary://{$base_name}_JPG.jpg", $args);
  if ($derivative_file === FALSE) {
    drupal_set_message(t('Failed to create JPG derivative'), 'error');
    return FALSE;
  }
  islandora_large_image_add_datastream($object, 'JPG', $derivative_file, 'image/jpeg', t('Medium sized JPEG'));
  return file_unmanaged_delete($derivative_file);
}
  */

  /*
convert [TIFF_FILE_PATH] -resize 600x800 -quality 75 +delete -background White -gravity center label:"[COLLECTION_NAME]\nLafayette College Libraries\nhttp://digital.lafayette.edu/[DRUPAL_PATH_ALIAS]" \
    -append [JPEG_FILE_PATH]
   */

  /*
  $solr = new Apache_Solr_Service('localhost', 8080, 'solr/fedora_5' . '/');
  try {

    $solr_query = "PID:\"$pid\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

  }
  */

  if(!isset($connection)) {

    $url = 'http://localhost:8080/fedora';
    $connection = islandora_get_tuque_connection(user_load(1), $url);
  }
  $object = $connection->repository->getObject(urldecode($pid));

  if(!isset($collection_name)) {

    $collection_name = array_shift(islandora_dss_get_cdm_collections($object));
  }
  if(!isset($path_alias)) {

    $path_alias = drupal_get_path_alias("islandora/object/{$object->id}");
  }

  $base_name = str_replace(':', '-', $object->id);

  module_load_include('inc', 'islandora_large_image', 'includes/derivatives');

  // Apparently, the TIFF wasn't ingested for Page Objects
  if(!$object['OBJ']) {

    $parent = islandora_object_load(array_pop($object->getParents()));
    $metadb_file_path = islandora_dss_get_metadb_file_path($parent, $is_back);

    drush_log("Ingesting $metadb_file_path into the OBJ datastream for for {$object->id}...", 'ok');

    // /mnt/imago1/master/MetaDB/imperial-postcards/lc-spcol-imperial-postcards-0001.tif
    islandora_large_image_add_datastream($object, 'OBJ', $metadb_file_path, 'image/tiff', t('Lossless TIFF'));
  }

  $tiff_file = file_save_data($object['OBJ']->content, "temporary://{$base_name}_OBJ.tiff");

  /*
convert warCasualties-10_OBJ_20.tiff[0] -resize '600x800' -quality '75' \( -background White -gravity center -bordercolor White -border 8 label:"Lafayette World War II Casualties\nLafayette College Libraries\nhttp://digital.lafayette.edu/collections/war/war-casualties-00004" \) -append warCasualties_10_JPG.jpg
  */
  $args = array();
  $args[] = '-resize ' . escapeshellarg("600x800");
  $args[] = '-quality ' . escapeshellarg(variable_get('imagemagick_quality', 75));

  // For members of the Marquis de Lafayette Prints Collection
  //$args[] = '+delete';

  // For the label (branding)
  $args[] = '\(';
  $args[] = '-background White';
  $args[] = '-gravity center';
  // Insecure
  $args[] = "label:\"$collection_name\\nLafayette College Libraries\\nhttp://digital.lafayette.edu/$path_alias\"";
  $args[] = '\)';
  $args[] = '-append';

  $derivative_file = islandora_large_image_imagemagick_convert($tiff_file->uri, "temporary://{$base_name}_JPG.jpg", $args);
  //$derivative_file = islandora_dss_large_image_imagemagick_convert($tiff_file->uri, "temporary://{$base_name}_JPG.jpg", $args);
  if ($derivative_file === FALSE) {

    drupal_set_message(t('Failed to create JPG derivative'), 'error');
    return FALSE;
  }
  drush_log("Successfully generated the JPG for {$object->id}", 'success');

  $jpg_ds = $object['JPG'];
  if($jpg_ds) {

    islandora_delete_datastream($jpg_ds);
  }

  islandora_large_image_add_datastream($object, 'JPG', $derivative_file, 'image/jpeg', t('Medium sized JPEG'));
  drush_log("Successfully ingested the JPG into the JPG datastream for {$object->id}", 'success');

  /*
  try {

    file_delete($tiff_file);
  } catch(PDOException $e) {

    drush_log("Could not delete the temporary TIFF file: {$e->getMessage()}", 'warning');
  }

  try {

    $result = file_unmanaged_delete($derivative_file);
  } catch(PDOException $e) {

    drush_log("Could not delete the temporary JPEG file: {$e->getMessage()}", 'warning');
  }
  */
  file_delete($tiff_file);
  $result = file_unmanaged_delete($derivative_file);

  return $result;
}

function islandora_dss_generate_jpeg_derivative_book($coll_pid) {

}

/*
function islandora_book_upload_page_form_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $object = islandora_ingest_form_get_object($form_state);
  $file = file_load($form_state['values']['file']);
  $object->label = $file->filename;
  islandora_paged_content_update_datastream($object, drupal_realpath($file->uri), 'OBJ', NULL, NULL, 'M', FALSE);
  // Update RELS-EXT properties, page/sequence/etc, and append the page at the
  // end of the book.
  $rels_ext = $object->relationships;
  $language = $form_state['values']['language'];
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  $book = islandora_object_load($shared_storage['book']);
  $pages = islandora_paged_content_get_pages($book);
  $num_pages = count($pages) + 1;
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'hasLanguage', $language, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isPageOf', $book->id);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isSequenceNumber', (string) $num_pages, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isPageNumber', (string) $num_pages, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isSection', '1', TRUE);
  islandora_paged_content_set_relationship($rels_ext, FEDORA_RELS_EXT_URI, 'isMemberOf', $book->id);
  islandora_paged_content_set_relationship($rels_ext, FEDORA_MODEL_URI, 'hasModel', 'islandora:pageCModel');
}
*/

/**
 * Generate derivatives for a Book Object
 *
 * @see islandora_book_islandora_pagecmodel_islandora_object_ingested()
 */
function islandora_dss_book_derive($object) {

  $derived_images = islandora_paged_content_can_derive($object, 'JP2') && islandora_paged_content_page_derive_image_datastreams($object);
  if ($derived_images) {
    $book_pid = islandora_paged_content_get_relationship($object->relationships, FEDORA_RELS_EXT_URI, 'isMemberOf', NULL);
    $book_object = islandora_object_load($book_pid);
    if ($book_object) {

      return islandora_paged_content_update_paged_content_thumbnail($book_object);
    }
  }
}

/**
 * Ingest a single Page for a Book Object
 *
 * @see islandora_book_upload_page_form_submit()
 * @see islandora_prepare_new_object()
 */
function islandora_dss_book_page_ingest($file, $book_pid, $label = NULL, $page_pid = NULL, $language = 'en-US') {

  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  $tuque = islandora_get_tuque_connection(user_load(1));

  if(isset($page_pid)) {

    $object = $tuque->repository->constructObject($page_pid);
  } else {

    // The namespace is retrieved from the PID passed as a parameter to the constructObject() method
    $object = $tuque->repository->constructObject('islandora');
  }

  if(isset($label)) {

    $object->label = $label;
  } else {

    $filename = property_exists($file, 'filename') ? $file->filename : $file;
    $object->label = $filename;
  }

  // Refactor and move into islandora_dss.drush.inc...
  drush_log("Ingesting the Object {$object->id}...", 'ok');

  islandora_paged_content_update_datastream($object, drupal_realpath(property_exists($file, 'uri') ? $file->uri : $file ), 'OBJ', NULL, NULL, 'M', FALSE);

  // Update RELS-EXT properties, page/sequence/etc, and append the page at the
  // end of the book.
  $rels_ext = $object->relationships;
  //$language = $form_state['values']['language'];
  //$shared_storage = islandora_ingest_form_get_shared_storage($form_state);

  // Retrieve the Book Object
  $book = islandora_object_load($book_pid);

  $pages = islandora_paged_content_get_pages($book);

  /**
   * @author griffinj@lafayette.edu
   * This appears to be a deprecated block of code from the migration processes (ContentDM)
   * This was likely related to cases in which extraneous pages were, for some unidentified reason, being appended to Book Objects
   */

  /*
  if(count($pages) > 1) {

    $last_page = array_pop($pages);
    $last_page = islandora_object_load($last_page['pid']);
    $last_page->delete();
  }
  */

  $num_pages = count($pages) + 1;

  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'hasLanguage', $language, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isPageOf', $book->id);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isSequenceNumber', (string) $num_pages, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isPageNumber', (string) $num_pages, TRUE);
  islandora_paged_content_set_relationship($rels_ext, ISLANDORA_RELS_EXT_URI, 'isSection', '1', TRUE);
  islandora_paged_content_set_relationship($rels_ext, FEDORA_RELS_EXT_URI, 'isMemberOf', $book->id);
  islandora_paged_content_set_relationship($rels_ext, FEDORA_MODEL_URI, 'hasModel', 'islandora:pageCModel');

  islandora_add_object($object);

  // Refactor and move into islandora_dss.drush.inc...
  drush_log("Ingested the Object {$object->id}", 'success');

  drush_log("Generating the derivatives for {$object->id}...", 'ok');
  islandora_dss_book_derive($object);
  drush_log("Generated the derivatives for {$object->id}", 'success');

  return $object;
}

function islandora_dss_strip_ellipsis($collection_name) {

  $solr = new Apache_Solr_Service('localhost', 8080, 'solr/fedora_5' . '/');

  try {

    $solr_query = "cdm.Relation.IsPartOf:\"$collection_name\"";
    //$solr_query = "cdm.Relation.IsPartOf:\"$collection_name\"";
    $results = $solr->search($solr_query, 0, 1000000, array('fl' => 'PID cdm.Relation.IsPartOf', 'sort' => 'dc.title asc'));
  } catch (Exception $e) {

    drupal_set_message(check_plain(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error');
  }
  $solr_results = json_decode($results->getRawResponse(), TRUE);

  foreach($solr_results['response']['docs'] as $solr_doc) {

    $object = islandora_object_load($solr_doc['PID']);

    $dc_ds = $object['DC'];

    $dc_doc = new SimpleXMLElement($dc_ds->content);

    // For parsing XPaths
    // (Should be refactored)
    $dc_doc->registerXPathNamespace("xml", "http://www.w3.org/XML/1998/namespace");
    $dc_doc->registerXPathNamespace("dc", "http://purl.org/dc/elements/1.1/");
    
    $title_element = array_shift($dc_doc->xpath('//dc:title'));

    $normalized_title = str_replace('...', '', $title_element->{0});
    $title_element->{0} = $normalized_title;
    $object->label = $normalized_title;

    drush_log("Updating the DC datastream for {$object->id}..", 'ok');
    $dc_ds->setContentFromString($dc_doc->asXML());
    drush_log("Successfully updated the DC datastream for {$object->id}..", 'success');
  }
}

/**
 * Search the Resource Index by dc:title value
 *
 */

function _islandora_dss_search_ri_dc_title($title, $user) {

    $query = '
SELECT ?subject
FROM <#ri>
WHERE {

?subject <dc:title> ?title ;
         <fedora-model:state> <info:fedora/fedora-system:def/model#Active> ;
FILTER regex(?title, "' . $title . '") .
}
';
    $tuque = islandora_get_tuque_connection($user);
    return $tuque->repository->ri->sparqlQuery($query);
}

/**
 * Checks whether the user can access the given object and datastream.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @param string $perm
 *   The user permission to test for.
 * @param FedoraObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 * @param FedoraDatastream $datastream
 *   The datastream to test, if NULL given the datastream doesn't exist
 *   or is inaccessible.
 * @param StdObject $account
 *   The account to test permissions as or NULL for current user.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 */

dpm($_GET);

function islandora_dss_object_datastream_access_callback($perm, $object = NULL, $datastream = NULL, $account = NULL) {

  $ISLANDORA_DSS_RESTRICTED_DS_IDS = array('MODS', 'MODS-M', 'OBJ', 'TIFF');

  if($datastream->id == 'OBJ') {

    // If this isn't the newspaper...
    /* @todo Refactor */
    if( $_SERVER['REMOTE_ADDR'] != variable_get('islandora_dss_geoserver_host', '139.147.4.148') and !in_array('islandora:newspaper', $object->getParents())) {

      // Authenticated
      return user_access('administer site configuration') && islandora_object_datastream_access_callback($perm, $object, $datastream, $account);
    }
  } elseif(in_array($datastream->id, $ISLANDORA_DSS_RESTRICTED_DS_IDS)) {

    // Authenticated
    return user_access('administer site configuration') && islandora_object_datastream_access_callback($perm, $object, $datastream, $account);
  }

  /*
  module_load_include('inc', 'islandora', 'includes/utilities');
  return user_access($perm, $account) && is_object($object) && islandora_namespace_accessible($object->id) && is_object($datastream);
  */

  return islandora_object_datastream_access_callback($perm, $object, $datastream, $account);
}

/**
 * Generating the UUID using OpenSSL
 * Used for a persistent identifier specifying the embedded SVG selector
 *
 * Taken from the following implementation: http://stackoverflow.com/a/15875555
 *
 */

function islandora_dss_uuid_v4() {
  
  $data = openssl_random_pseudo_bytes(16);
  
  $data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100
  $data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10

  return vsprintf('urn:uuid:%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
}

define("OA_URI", 'http://www.w3.org/ns/oa#');
define("RDF_CONTENT_URI", 'http://www.w3.org/2011/content#');
define("RELS_TYPE_XML", 5);

/**
 * Adding RDF statements to the RELS-EXT datastream with non-Fedora Commons subject terms
 *
 * @see FedoraRelationships
 *
 */
function islandora_dss_add_relationship($rels_ext_ds, $subject, $predicate_uri, $predicate, $object, $type = RELS_TYPE_URI) {

  $type = intval($type);

  /**
   * @see FedoraRelationships
   *
   */
  $namespaces = array('rdf' => RDF_URI,
		      'fedora' => FEDORA_RELS_EXT_URI,
		      'fedora-model' => FEDORA_MODEL_URI,
		      'islandora' => ISLANDORA_RELS_EXT_URI,
		      'oa' => OA_URI,
		      'cnt' => RDF_CONTENT_URI,
		      //'xmlns' => 'http://www.w3.org/2000/xmlns/'
		      );

  /**
   * @see FedoraRelationships::getDom
   *
   */
  $document = new DomDocument();
  $document->preserveWhiteSpace = FALSE;
  $document->loadXml($rels_ext_ds->content);

  /**
   * @see FedoraRelationships::getXpath
   *
   */
  $xpath = new DomXPath($document);
  foreach ($namespaces as $alias => $uri) {

    $xpath->registerNamespace($alias, $uri);
  }

  /*
  // Check to see if namespaces have been added...

  foreach(array('oa' => OA_URI,
		'cnt' => RDF_CONTENT_URI) as $new_ns_prefix => $new_ns_uri) {

    $namespace = $xpath->query('/rdf:RDF[@xmlns:' . $new_ns_prefix . '="' . $new_ns_uri . '"]');
    if($namespace->length == 0) {

      $document->documentElement->setAttributeNS('http://www.w3.org/2000/xmlns/',
						 'xmlns:' . $new_ns_prefix,
						 $new_ns_uri);
    }
  }
  */

  $description_upper = $xpath->query('/rdf:RDF/rdf:Description[@rdf:about="'.$subject.'"]');
  $description_lower = $xpath->query('/rdf:RDF/rdf:description[@rdf:about="'.$subject.'"]');

  if ($description_lower->length == 0 && $description_upper->length == 0) {
    $description = $document->createElementNS(RDF_URI, 'Description');
    $document->documentElement->appendChild($description);
    $description->setAttributeNS(RDF_URI, 'rdf:about', $subject);
  }
  elseif($description_lower->length) {
    $description = $description_lower->item(0);
  } else {
    $description = $description_upper->item(0);
  }

  $relationship = $document->createElementNS($predicate_uri, $predicate);
  $description->appendChild($relationship);

  if($type == RELS_TYPE_XML) {

    $object = $document->importNode($object, true);
    $relationship->appendChild($object);
  } elseif ($type != RELS_TYPE_URI) {

    $relationship->nodeValue = $object;
  }

  switch ($type) {
  case RELS_TYPE_URI:
    $relationship->setAttributeNS(RDF_URI, 'rdf:resource', $object);
    break;

  case RELS_TYPE_STRING:
    //$relationship->setAttribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#string');
    break;

  case RELS_TYPE_INT:
    $relationship->setAttribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#int');
    break;

  case RELS_TYPE_DATETIME:
    $relationship->setAttribute('rdf:datatype', 'http://www.w3.org/2001/XMLSchema#dateTime');
    break;

  case RELS_TYPE_XML:
    
    // Fedora Commons does not permit XML literals?
    //$relationship->setAttribute('rdf:parseType', 'Literal');
    break;

  }

  $rels_ext_ds->content = $document->saveXml();
}

/**
 * Checks whether the user can access the given object and datastream.
 *
 * This function will validate and use a token if present in the GET parameters.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @see islandora_object_datastream_tokened_access_callback()
 */
function islandora_dss_object_datastream_tokened_access_callback($perm, $object = NULL, $datastream = NULL) {

  return islandora_dss_object_datastream_access_callback($perm, $object, $datastream) && islandora_object_datastream_tokened_access_callback($perm, $object, $datastream);
}

/**
 * Checks whether the user can access the given object.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @param string $perm
 *   User permission to test for.
 * @param FedoraObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 */
function islandora_dss_object_access_callback($perm, $object = NULL) {

  if(in_array('islandora:pageCModel', $object->models)) {

    return user_access('administer site configuration') && islandora_object_access_callback($perm, $object); 
  }

  return islandora_object_access_callback($perm, $object);
}

/**
 * Ensures that only administrators can access the pages interface
 *
 * @param FedoraObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 */
function islandora_dss_book_pages_access_callback($object = NULL) {
  
  return user_access('administer site configuration') && islandora_book_pages_access_callback($object);
}

function islandora_dss_menu_alter(&$items) {

  $items['islandora/object/%islandora_object/datastream/%islandora_datastream']['access callback'] = 'islandora_dss_object_datastream_access_callback';
  $items['islandora/object/%islandora_tokened_object/datastream/%islandora_tokened_datastream/view']['access callback'] = 'islandora_dss_object_datastream_tokened_access_callback';
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/download']['access callback'] = 'islandora_dss_object_datastream_access_callback';

  unset($items['islandora/object/%islandora_object/pages']);

  $items['islandora/object/%islandora_object']['access callback'] = 'islandora_dss_object_access_callback';
}
